/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package graphingcalculator;
import java.awt.Graphics;
import java.awt.Color;
/**
 *
 * @author 349066522
 */
public class GraphingCalculatorGUI extends javax.swing.JFrame {

        // initializing the array so it can be accessed from all methods
        double [] coefficients = new double[6];
        // position of where the roots are going to be shown
        int posRootsLabel = 25;

    
        /**
     * Creates new form GraphingCalculatorGUI
     */
    public GraphingCalculatorGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quitButton = new javax.swing.JButton();
        graphPanel = new javax.swing.JPanel();
        textFieldX5 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        graphButton = new javax.swing.JButton();
        clearGraphButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textFieldX4 = new javax.swing.JTextField();
        textFieldX3 = new javax.swing.JTextField();
        textFieldX2 = new javax.swing.JTextField();
        textFieldX = new javax.swing.JTextField();
        textFieldY = new javax.swing.JTextField();
        rootsNo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        textFieldX5.setText("0");
        textFieldX5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldX5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("JavaGraph");

        graphButton.setText("Graph");
        graphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphButtonActionPerformed(evt);
            }
        });

        clearGraphButton.setText("Clear");
        clearGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGraphButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("f(x)=");

        jLabel3.setText("x+");

        jLabel4.setText("x^2+");

        jLabel5.setText("x^3+");

        jLabel6.setText("x^4+");

        jLabel7.setText("x^5+");

        textFieldX4.setText("0");
        textFieldX4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldX4ActionPerformed(evt);
            }
        });

        textFieldX3.setText("0");
        textFieldX3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldX3ActionPerformed(evt);
            }
        });

        textFieldX2.setText("0");
        textFieldX2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldX2ActionPerformed(evt);
            }
        });

        textFieldX.setText("0");
        textFieldX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldXActionPerformed(evt);
            }
        });

        textFieldY.setText("0");
        textFieldY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldYActionPerformed(evt);
            }
        });

        rootsNo.setText("The roots are: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(graphButton)
                        .addGap(139, 139, 139)
                        .addComponent(clearGraphButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldX5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldX4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldX3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textFieldX2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(graphPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(31, 31, 31)
                            .addComponent(rootsNo)
                            .addGap(502, 502, 502)
                            .addComponent(quitButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldX5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(textFieldX4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldX3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldX2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(graphButton)
                    .addComponent(clearGraphButton))
                .addGap(33, 33, 33)
                .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quitButton)
                    .addComponent(rootsNo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldX5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldX5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldX5ActionPerformed

    private void graphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphButtonActionPerformed

        // when the graph button is pressed, graph the function with x and y values from -10 to 10
        // set the panel to be visible
        graphPanel.setVisible(true);
        
        rootsNo.setText("");
        
        Graphics g = graphPanel.getGraphics();
        // draw the line for the y axis
        g.drawLine(250, 0, 250, 500);
        // draw the line for the x axis
        g.drawLine(0, 250, 500, 250);
        
        // for loop for scale for y axis
        for (int i = 0; i <=500; i = i + 25) {
            g.drawLine(245, i, 255, i); 
            
            // calculate the sequence for the scale
            String numbersY = String.valueOf((250-i)/25);    
            
            // avoid printing two zeros on the scale for x and y axis
            if (numbersY.equals("0")){
                numbersY = "";
            }  
            
            // draw the scale
            else {
             g.drawString(numbersY, 228, i + 10);
            }
      
        }
        
        // for loop for scale on the x axis
        for (int i = 0; i <=500; i = i + 25) {
            g.drawLine(i, 245, i, 255);
            String numbersX = String.valueOf((i-250)/25);
           
            // draw only one zero on the scale
            if (numbersX.equals("0")){
                g.drawString("0",255,267);
            }  
            // draw the scale
            else{
            g.drawString(numbersX, i, 267);
            }
        }
        
        // boolean for determining if any roots were found
        boolean rootFound = false;
        
         //checks if there are any empty textfields and sets their array location to 0. 
        
        //If there are values in thetextfield, it accepts the values from each texfield and sets it to an array location
        // if else statements determining if the textfield is empty
        if (textFieldX5.getText().equals("")) {
            coefficients[0] = 0;
        }
         
        else{
        coefficients [0] = Float.parseFloat(textFieldX5.getText());
                }
        
        if (textFieldX4.getText().equals("")) {
            coefficients[1] = 0;
        }
        else {
        coefficients [1] = Float.parseFloat(textFieldX4.getText());
                }
        
        if (textFieldX3.getText().equals("")) {
            coefficients[2] = 0;
        }
        else {
        coefficients [2] = Float.parseFloat(textFieldX3.getText());
                }
        
        if (textFieldX2.getText().equals("")) {
            coefficients[3] = 0;
        }
        else {
        coefficients [3] = Float.parseFloat(textFieldX2.getText());
                }
        
        if (textFieldX.getText().equals("")) {
            coefficients[4] = 0;
        }
        else {
        coefficients [4] = Float.parseFloat(textFieldX.getText());
                }
        
        if (textFieldY.getText().equals("")) {
            coefficients[5] = 0;
        }
        else {
        coefficients [5] = Float.parseFloat(textFieldY.getText());
                }
     
        // generates the panel's coordinates for drawing the graph
       
        // the x counter goes form zero to 500, pixel by pixel on the graph and is used as the x coordinate for each point on the graph
        int xCounter = 0;
        
        // variable that stores the y value from funcVal
        double yVal;
        
        double yCounter;
        
        // draws rectangles in between the plot points to fill in the graphed line
        double lastPosY = (int) (funcVal(-10, coefficients) * 25 * -1) + 250;
        
        // represents the distance between the current y value and the previous y value
        double yBetween;
             
        double xStart = -10;
      
        double xIncrement = 1;
       
        double xEnd = xStart + xIncrement;
        

          
        // for loop that starts from -10 and goes up to ten by increments of 0.04
        for (double xVal = -10; xVal <=10; xVal = xVal + 0.04) {
            
           // yVal is set to the generated y value from the funcVal method
            yVal = funcVal(xVal, coefficients);
            System.out.println(yVal);
            
            // yCounter stroes the converted coordinate for the y value that is used on the cartesian plane
            yCounter = (int) (yVal * 25 * -1) + 250;
            
            // sets the value for the distance between the current y value and the previous y value
            yBetween = Math.abs((int)yCounter - (int) lastPosY);
            
            // if statement to confirm that the function can be displayed on the graph
            if (yCounter >= 0 && yCounter <= 500) {
                g.setColor(Color.red);
                
                // graphing the dots for the function
                g.fillOval((int) xCounter, (int) yCounter, 4, 4);  
                
                // if the last position of the y value was less      than the value of y counter
                if (lastPosY < yCounter) {
                    // fill in the space between the dots to make the graph a smooth line
                    g.fillRect((int) xCounter, (int) lastPosY, 4, (int)yBetween);
           
                }
                
                else {
                    // fill in the space between the dots to make the graph a smooth line
                    g.fillRect((int) xCounter, (int) yCounter, 4, (int)yBetween);
                }
              // increase the value of x counter by one
                xCounter ++;
            }
            
            else {
            
             // increase the value of x counter by 1
                xCounter++;
            }
            // set the variable yStart to the y value of xStart
            double yStart = funcVal((xStart-250)/25, coefficients);
           
            // set the variable yEnd to the y value of xEnd
            double yEnd = funcVal((xEnd-250)/25, coefficients);
            
            double bisectionVal = 0;
            
        //  if the product of yStart and yEnd is less than zerk
            if (yStart * yEnd < 0) {
                // call the bisection method and set it to the variable bisectionVal
                bisectionVal = bisection(xStart, xEnd, 0.001);
               
                // set color to blue
                g.setColor(Color.blue);
                
                // display the roots on the screen
                g.drawString("Root at: " + bisectionVal, 20, posRootsLabel);
                rootFound = true;
               
            // increase the y position of where to display the roots
                posRootsLabel = posRootsLabel + 25;
                
                // set xStart equal to xEnd
                xStart = xEnd;
                
            // add one to xEnd
                xEnd = xStart + 1;
            } 
            
            else {
                // add one to xEnd
                xEnd = xEnd + 1;
                
            } 
            
            // checks if roots were found
            // if no roots found
            if (rootFound == false) {
                rootsNo.setText("No Roots found");
                // if statement for determining if f(x) = 0, meaning roots are at all numbers
                
                if (coefficients [3] == 0 && coefficients [1] == 0 && coefficients [2] == 0 && coefficients [4] == 0 && coefficients [5] == 0) {
                    rootsNo.setText("Roots at all numbers");
                }
                
                // else if statement for determining if the roots are at the origin
                else if (Math.abs(coefficients[1]) > 0 && coefficients[2] == 0 && coefficients[3] == 0 && coefficients[4] == 0 && coefficients[5] == 0) {
                rootsNo.setText("Root at: 0,0");
                 } 
                // else if statement for determining if the roots are at the origin
                else if (coefficients[1] == 0 && Math.abs(coefficients[2]) > 0 && coefficients[3] == 0 && coefficients[4] == 0 && coefficients[5] == 0) {
                rootsNo.setText("Root at: 0,0");
                 } 
                // else if statement for determining if the roots are at the origin
                else if (coefficients[1] == 0 && coefficients[2] == 0 && Math.abs(coefficients[3]) > 0 && coefficients[4] == 0 && coefficients[5] == 0) {
                rootsNo.setText("Root at: 0,0");
                    } 
                // else if statement for determining if the roots are at the origin
                else if (coefficients[1] == 0 && coefficients[2] == 0 && coefficients[3] == 0 && Math.abs(coefficients[4]) > 0 && coefficients[5] == 0) {
                rootsNo.setText("Root at: 0,0");
                    } 
                // else if statement for determining if the roots are at the origin
                else if (coefficients[1] == 0 && coefficients[2] == 0 && coefficients[3] == 0 && coefficients[4] == 0 && Math.abs(coefficients[5]) > 0) {
                rootsNo.setText("Root at: 0,0");
                }      
            }
            
            // if roots were found
            else if (rootFound == true) {
                // display that roots were found
                rootsNo.setText("Roots found");
                
            }
            
             // the last position equals the yCounter
            lastPosY = yCounter;
        }

    }//GEN-LAST:event_graphButtonActionPerformed

    // method for returning the y value for the corresponding function
    private static double funcVal(double xln, double arrayIn[]) {
        // method takes in the double x value and the value of a specific array and returns the y value
        double y;
        // variable for storing the value for each array location
        double runningSum = 0;
        for (int a = 0; a <=5; a = a +1) {
            // variable for calculating the y value for each array location
            double val = arrayIn[a] * Math.pow(xln, 5 - a);
            // updating the variable for each calculation
            runningSum = runningSum + val;
        }
        // set the return value equal to the runningsum variable
        y = runningSum;
        return y;
    }
    
    // method for finding roots of function 
    private double bisection(double xLeft, double xRight, double xAccuracy) {
        // initialize variable for midpoint to zero
        double xMidpoint = 0;
        
        // while the value of xRight subtract the value of xLeft is less than the value of xAccuracy
        while (xRight - xLeft < xAccuracy) {
            // set midpoint to the midpoint equation of the sum of xLeft and xRight
            xMidpoint = (xRight + xLeft) / 2;
                // if the product of the y value of xMidpoint multiplied by the y value of xLeft is less than or equal to zero
            if ((funcVal(xMidpoint, coefficients)) * (funcVal(xLeft, coefficients)) <= 0)  {
                // set xLeft equal to xMidpoint
                xLeft = xMidpoint;
            }
            else {
            // set xRight equal to xMidpoint
                xRight = xMidpoint;
            }
        }
        // return the midpoint as xRight is set to midpoint
        return ((xRight - 250) / 25) - 0.04;
    }

    
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        // TODO add your handling code here:
        // exit/close the program
        System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

    private void textFieldX4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldX4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldX4ActionPerformed

    private void textFieldX3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldX3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldX3ActionPerformed

    private void textFieldX2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldX2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldX2ActionPerformed

    private void textFieldXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldXActionPerformed

    private void textFieldYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldYActionPerformed

    private void clearGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearGraphButtonActionPerformed
        // if the clear button is pressed
        // make the panel invisible
        graphPanel.setVisible(false);
        
        // clear all textfields and labels
        textFieldX5.setText("");
        textFieldX4.setText("");
        textFieldX3.setText("");       
        textFieldX2.setText("");
        textFieldX.setText("");
        textFieldY.setText("");
        rootsNo.setText("");
        
        // reset position of the roots label
        posRootsLabel = 25;
        
        // set the panel back to visible
        graphPanel.setVisible(true);
    }//GEN-LAST:event_clearGraphButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphingCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphingCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphingCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphingCalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphingCalculatorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearGraphButton;
    private javax.swing.JButton graphButton;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel rootsNo;
    private javax.swing.JTextField textFieldX;
    private javax.swing.JTextField textFieldX2;
    private javax.swing.JTextField textFieldX3;
    private javax.swing.JTextField textFieldX4;
    private javax.swing.JTextField textFieldX5;
    private javax.swing.JTextField textFieldY;
    // End of variables declaration//GEN-END:variables
}
